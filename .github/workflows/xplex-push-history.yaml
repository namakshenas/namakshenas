name: xplex-push-history

on:
  schedule:
    # Runs every Friday at 00:00 UTC
    - cron: '0 0 * * 5'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  update-timeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout profile repo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate xplex push timeline
      run: |
        # Fetch entire commit history from xplex repository
        echo "Fetching xplex commit history..."
        
        # Get all commits and aggregate by month
        page=1
        > all_commits.txt
        
        while true; do
          echo "Fetching page $page..."
          
          response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository_owner }}/xplex/commits?per_page=100&page=$page")
          
          # Extract HTTP status code
          http_code=$(echo "$response" | tail -n 1)
          content=$(echo "$response" | head -n -1)
          
          # Check HTTP status
          if [ "$http_code" != "200" ]; then
            echo "API request failed with status code: $http_code"
            if [ "$http_code" = "404" ]; then
              echo "Repository not found or not accessible"
            elif [ "$http_code" = "401" ]; then
              echo "Authentication failed"
            fi
            echo "Response: $content"
            break
          fi
          
          # Check if response is empty array or invalid
          if [ "$content" = "[]" ] || [ -z "$content" ]; then
            echo "No more commits found"
            break
          fi
          
          # Validate JSON structure before parsing
          if echo "$content" | jq empty 2>/dev/null; then
            # Extract dates and append to file
            echo "$content" | jq -r '.[]? | .commit.author.date // empty' >> all_commits.txt
            
            # Check if we got less than 100 results (last page)
            count=$(echo "$content" | jq '. | length')
            if [ "$count" -lt 100 ]; then
              echo "Reached last page (found $count commits)"
              break
            fi
          else
            echo "Invalid JSON response"
            break
          fi
          
          page=$((page + 1))
          
          # Safety limit to prevent infinite loops
          if [ "$page" -gt 100 ]; then
            echo "Reached maximum page limit"
            break
          fi
        done
        
        # Check if we got any commits
        if [ ! -s all_commits.txt ]; then
          echo "No commits found. Creating empty chart..."
          > monthly_data.txt
        else
          # Aggregate by month (YYYY-MM format)
          echo "Processing $(wc -l < all_commits.txt) commits..."
          cat all_commits.txt | cut -d'T' -f1 | cut -d'-' -f1,2 | sort | uniq -c | awk '{print $2 " " $1}' > monthly_data.txt
        fi
        
        # Generate Mermaid xychart
        echo "Generating Mermaid chart..."
        
        # Start building the chart
        echo "" > chart.md
        echo "<!-- XPLEX-PUSH-HISTORY-START -->" >> chart.md
        echo "## ðŸ“Š Xplex Push History (Monthly)" >> chart.md
        echo "" >> chart.md
        echo '```mermaid' >> chart.md
        echo "%%{init: {'theme': 'dark', 'themeVariables': { 'xyChart': {'width': 900, 'height': 400}}}}%%" >> chart.md
        echo 'xychart-beta' >> chart.md
        echo '    title "Xplex Repository Monthly Push Activity"' >> chart.md
        echo -n '    x-axis [' >> chart.md
        
        # Add months to x-axis
        if [ -s monthly_data.txt ]; then
          # Get all months and format them
          months=$(cat monthly_data.txt | cut -d' ' -f1 | sed 's/^/"/' | sed 's/$/"/' | tr '\n' ',' | sed 's/,$//')
          echo "$months]" >> chart.md
          
          # Calculate max value for y-axis
          max_count=$(cat monthly_data.txt | cut -d' ' -f2 | sort -n | tail -1)
          # Round up to nearest 10
          y_max=$(( (max_count / 10 + 1) * 10 ))
        else
          # Default to current month if no data
          current_month=$(date '+%Y-%m')
          echo "\"$current_month\"]" >> chart.md
          y_max=10
        fi
        
        echo "    y-axis \"Number of Pushes\" 0 --> $y_max" >> chart.md
        echo -n '    bar [' >> chart.md
        
        # Add push counts
        if [ -s monthly_data.txt ]; then
          counts=$(cat monthly_data.txt | cut -d' ' -f2 | tr '\n' ',' | sed 's/,$//')
          echo "$counts]" >> chart.md
        else
          # Default to zero if no data
          echo "0]" >> chart.md
        fi
        
        echo '```' >> chart.md
        echo "" >> chart.md
        
        # Add summary statistics
        if [ -s monthly_data.txt ]; then
          total_commits=$(awk '{sum+=$2} END {print sum}' monthly_data.txt)
          total_months=$(wc -l < monthly_data.txt)
          avg_per_month=$(awk '{sum+=$2} END {printf "%.1f", sum/NR}' monthly_data.txt)
          first_month=$(head -1 monthly_data.txt | cut -d' ' -f1)
          last_month=$(tail -1 monthly_data.txt | cut -d' ' -f1)
          
          echo "### ðŸ“ˆ Statistics" >> chart.md
          echo "- **Total Commits**: $total_commits" >> chart.md
          echo "- **Active Months**: $total_months" >> chart.md
          echo "- **Average per Month**: $avg_per_month" >> chart.md
          echo "- **Period**: $first_month to $last_month" >> chart.md
        else
          echo "### ðŸ“ˆ Statistics" >> chart.md
          echo "- No commit data available yet" >> chart.md
        fi
        
        echo "" >> chart.md
        echo "*Last updated: $(date '+%Y-%m-%d %H:%M UTC')*" >> chart.md
        echo "<!-- XPLEX-PUSH-HISTORY-END -->" >> chart.md
        
        # Clean up
        rm -f all_commits.txt monthly_data.txt
        
    - name: Update README.md
      run: |
        # Check if markers exist in README
        if grep -q "<!-- XPLEX-PUSH-HISTORY-START -->" README.md; then
          echo "Updating existing chart in README..."
          # Replace content between markers
          sed -i '/<!-- XPLEX-PUSH-HISTORY-START -->/,/<!-- XPLEX-PUSH-HISTORY-END -->/d' README.md
          cat chart.md >> README.md
        else
          echo "Adding chart to end of README..."
          # Add to end of file
          echo "" >> README.md
          cat chart.md >> README.md
        fi
        
        rm -f chart.md
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add README.md
          git commit -m "Update xplex push history chart [skip ci]"
          git push
        fi
