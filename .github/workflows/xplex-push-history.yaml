name: xplex-push-history

on:
  schedule:
    # Runs every Friday at 00:00 UTC
    - cron: '0 0 * * 5'
  workflow_dispatch: # Allow manual trigger for testing

jobs:
  update-timeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout profile repo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate xplex push timeline
      run: |
        # Fetch entire commit history from xplex repository
        echo "Fetching complete xplex commit history..."
        
        # Initialize variables
        page=1
        total_commits=0
        > all_commits.txt
        
        # Fetch ALL pages of commits
        while true; do
          echo "Fetching page $page..."
          
          # Make API request with proper authentication
          response=$(curl -s -w "\n%{http_code}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository_owner }}/xplex/commits?per_page=100&page=$page")
          
          # Split response and status code
          http_code=$(echo "$response" | tail -n 1)
          content=$(echo "$response" | head -n -1)
          
          # Check HTTP status
          if [ "$http_code" != "200" ]; then
            echo "HTTP Error: $http_code"
            if [ "$http_code" = "404" ]; then
              echo "ERROR: Repository '${{ github.repository_owner }}/xplex' not found!"
              exit 1
            fi
            break
          fi
          
          # Check if we have commits
          if [ "$content" = "[]" ]; then
            echo "No more commits on page $page"
            break
          fi
          
          # Count commits on this page
          page_count=$(echo "$content" | jq '. | length')
          echo "Found $page_count commits on page $page"
          
          # Extract ALL commit dates from this page
          echo "$content" | jq -r '.[] | .commit.author.date' >> all_commits.txt
          
          total_commits=$((total_commits + page_count))
          
          # If we got less than 100, it's the last page
          if [ "$page_count" -lt 100 ]; then
            echo "Reached last page"
            break
          fi
          
          # Move to next page
          page=$((page + 1))
          
          # Safety limit (but high enough for large repos)
          if [ "$page" -gt 500 ]; then
            echo "WARNING: Reached page limit of 500"
            break
          fi
        done
        
        echo "Total commits fetched: $total_commits"
        
        # Process commits into monthly data
        if [ -s all_commits.txt ]; then
          echo "Processing commits into monthly aggregates..."
          
          # Extract YYYY-MM from dates and count occurrences
          cat all_commits.txt | cut -d'T' -f1 | cut -d'-' -f1,2 | sort | uniq -c | awk '{print $2 " " $1}' | sort > monthly_data.txt
          
          echo "Months with activity: $(wc -l < monthly_data.txt)"
          echo "Sample of monthly data:"
          head -5 monthly_data.txt
        else
          echo "ERROR: No commits found!"
          > monthly_data.txt
        fi
        
        # Generate Mermaid xychart
        echo "Generating Mermaid chart..."
        
        # Start building the chart
        echo "" > chart.md
        echo "<!-- XPLEX-PUSH-HISTORY-START -->" >> chart.md
        echo "## ðŸ“Š Xplex Push History (Complete Monthly Timeline)" >> chart.md
        echo "" >> chart.md
        
        if [ -s monthly_data.txt ]; then
          # Get first and last month for complete range
          first_month=$(head -1 monthly_data.txt | cut -d' ' -f1)
          last_month=$(tail -1 monthly_data.txt | cut -d' ' -f1)
          
          echo "Creating chart from $first_month to $last_month"
          
          # Create complete month range (fill gaps with zeros)
          start_year=$(echo $first_month | cut -d'-' -f1)
          start_month=$(echo $first_month | cut -d'-' -f2)
          end_year=$(echo $last_month | cut -d'-' -f1)
          end_month=$(echo $last_month | cut -d'-' -f2)
          
          # Generate all months in range
          > all_months.txt
          > final_data.txt
          
          current_year=$start_year
          current_month=$start_month
          
          while true; do
            # Format month with leading zero
            formatted_month=$(printf "%04d-%02d" $current_year $current_month)
            echo "$formatted_month" >> all_months.txt
            
            # Get count for this month (or 0 if no commits)
            count=$(grep "^$formatted_month " monthly_data.txt | cut -d' ' -f2)
            if [ -z "$count" ]; then
              count=0
            fi
            echo "$formatted_month $count" >> final_data.txt
            
            # Check if we've reached the end
            if [ "$current_year" -eq "$end_year" ] && [ "$current_month" -eq "$end_month" ]; then
              break
            fi
            
            # Move to next month
            current_month=$((current_month + 1))
            if [ "$current_month" -gt 12 ]; then
              current_month=1
              current_year=$((current_year + 1))
            fi
          done
          
          # Build the chart with complete data
          echo '```mermaid' >> chart.md
          echo "%%{init: {'theme': 'dark', 'themeVariables': { 'xyChart': {'width': 900, 'height': 400}}}}%%" >> chart.md
          echo 'xychart-beta' >> chart.md
          echo '    title "Xplex Repository - Complete Monthly Push Activity"' >> chart.md
          
          # X-axis with all months
          echo -n '    x-axis [' >> chart.md
          months=$(cat final_data.txt | cut -d' ' -f1 | sed 's/^/"/' | sed 's/$/"/' | tr '\n' ',' | sed 's/,$//')
          echo "$months]" >> chart.md
          
          # Calculate appropriate Y-axis max
          max_count=$(cat final_data.txt | cut -d' ' -f2 | sort -n | tail -1)
          if [ "$max_count" -le 10 ]; then
            y_max=10
          elif [ "$max_count" -le 50 ]; then
            y_max=50
          elif [ "$max_count" -le 100 ]; then
            y_max=100
          else
            y_max=$(( (max_count / 100 + 1) * 100 ))
          fi
          
          echo "    y-axis \"Number of Pushes\" 0 --> $y_max" >> chart.md
          
          # Bar data with all counts
          echo -n '    bar [' >> chart.md
          counts=$(cat final_data.txt | cut -d' ' -f2 | tr '\n' ',' | sed 's/,$//')
          echo "$counts]" >> chart.md
          
          echo '```' >> chart.md
          echo "" >> chart.md
          
          # Calculate statistics
          total_commits=$(cat all_commits.txt | wc -l)
          active_months=$(grep -v " 0$" final_data.txt | wc -l)
          total_months=$(cat final_data.txt | wc -l)
          
          if [ "$active_months" -gt 0 ]; then
            avg_per_active_month=$(awk '$2>0 {sum+=$2; count++} END {printf "%.1f", sum/count}' final_data.txt)
          else
            avg_per_active_month="0"
          fi
          
          echo "### ðŸ“ˆ Repository Statistics" >> chart.md
          echo "- **Total Commits**: $total_commits" >> chart.md
          echo "- **Active Months**: $active_months / $total_months" >> chart.md
          echo "- **Average per Active Month**: $avg_per_active_month" >> chart.md
          echo "- **Timeline**: $first_month to $last_month" >> chart.md
          
          # Find most active month
          most_active=$(sort -k2 -n -r final_data.txt | head -1)
          most_active_month=$(echo $most_active | cut -d' ' -f1)
          most_active_count=$(echo $most_active | cut -d' ' -f2)
          if [ "$most_active_count" -gt 0 ]; then
            echo "- **Most Active Month**: $most_active_month ($most_active_count commits)" >> chart.md
          fi
          
          # Clean up temp files
          rm -f all_months.txt final_data.txt
        else
          # No data case
          echo '```mermaid' >> chart.md
          echo "%%{init: {'theme': 'dark', 'themeVariables': { 'xyChart': {'width': 900, 'height': 400}}}}%%" >> chart.md
          echo 'xychart-beta' >> chart.md
          echo '    title "Xplex Repository - No Data Available"' >> chart.md
          echo '    x-axis ["No Data"]' >> chart.md
          echo '    y-axis "Number of Pushes" 0 --> 10' >> chart.md
          echo '    bar [0]' >> chart.md
          echo '```' >> chart.md
          echo "" >> chart.md
          echo "### ðŸ“ˆ Repository Statistics" >> chart.md
          echo "- No commit data available" >> chart.md
        fi
        
        echo "" >> chart.md
        echo "*Last updated: $(date '+%Y-%m-%d %H:%M UTC')*" >> chart.md
        echo "<!-- XPLEX-PUSH-HISTORY-END -->" >> chart.md
        
        # Clean up
        rm -f all_commits.txt monthly_data.txt
        
    - name: Update README.md
      run: |
        # Check if markers exist in README
        if grep -q "<!-- XPLEX-PUSH-HISTORY-START -->" README.md; then
          echo "Updating existing chart in README..."
          # Replace content between markers
          sed -i '/<!-- XPLEX-PUSH-HISTORY-START -->/,/<!-- XPLEX-PUSH-HISTORY-END -->/d' README.md
          cat chart.md >> README.md
        else
          echo "Adding chart to end of README..."
          # Add to end of file
          echo "" >> README.md
          cat chart.md >> README.md
        fi
        
        rm -f chart.md
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add README.md
          git commit -m "Update xplex push history chart [skip ci]"
          git push
        fi
